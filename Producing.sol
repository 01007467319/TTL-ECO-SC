pragma solidity ^0.4.16;

//this defines an interface 'InterfaceImplRecuriting'
//providing function 'recuriting'.
interface interfaceRecuriting
{
    function recuriting(bytes32 ran_num, uint k, uint l)  external returns(uint, uint, uint);
}


//the contract ‘recuriting’ will generate a committee consisting k arbitrators. 
//contract InterfaceImplRecuriting is interfaceRecuriting
contract Recuriting is interfaceRecuriting
{
    
    //defining current height number of the blockchain
    uint chain_height;
    
    //defining especial blocks generated by the arbitrators
    uint[11] number_block;
    
    
    //the recuriting generates k arbitrators.
    //the k blocks is randomly chosen from l consecutive blocks,
    //the k arbitrators are the miners that mined these k blocks.
    //that is, the k arbitrator is randomly recurited from l miners.
    //we use the number_block to represent the arbitrator,
    //since Solidity does not provide the application programme interface (API) of mapping function F
    //about the relation between the miner(arbitrator) and the block. 
    //subsituting F with keccak256.
    function recuriting(bytes32 ran_num, uint k, unit l) external returns(uint, uint, uint)
    {
        
        bytes32 hash_ran_num;
        uint h,j;

        for (uint i = 0; i < k; i ++)
        {

              hash_ran_num = keccak256(ran_num ^ l ^ i);         //hash current random number ran_num, l and i
              h = uint(hash_ran_num);                            //convert bytes32 to uint
              j = addmod(h, 0, l);                               //computing (h+0)%l, obtaining one block number index
              number_block[i] = keccak256(j);                    //instituting mapping function F with keccak256        
               
        }
        
        //return some arbitrators selected randomly
        return (number_block[0], number_block[1], number_block[2]);
    }
    
}





